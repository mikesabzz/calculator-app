{"version":3,"sources":["component/Header/index.js","component/FirstInput/index.js","component/SecondInput/index.js","component/Calculator/index.js","component/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","FirstInput","onClick","handleNum1Props","value","SecondInput","handleNum2Props","Calculator","getAddResult","event","state","num1","num2","setState","result","parseFloat","operation","target","getNegResult","getMultiResult","getDivideResult","toFixed","clear","bind","handleNum1Change","handleNum2Change","this","reset","join","onChange","to","path","component","type","React","Component","Footer","text","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29d66101.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Header(props) {\n    return (\n        <div className=\"font-weight-bold p-3 bg-dark text-white\">\n            <h1>{props.title}</h1>\n        </div>\n    )\n\n}\nexport default Header","import React from 'react';\n\nconst FirstInput = (props) => {\n    return (\n        <div>\n            <button onClick={props.handleNum1Props} value=\"1\" className=\"btn btn-success m-1 btn-lg\">1</button>\n            <button onClick={props.handleNum1Props} value=\"2\" className=\"btn btn-success m-1 btn-lg\">2</button>\n            <button onClick={props.handleNum1Props} value=\"3\" className=\"btn btn-success m-1 btn-lg\">3</button>\n            <br />\n            <button onClick={props.handleNum1Props} value=\"4\" className=\"btn btn-success m-1 btn-lg\">4</button>\n            <button onClick={props.handleNum1Props} value=\"5\" className=\"btn btn-success m-1 btn-lg\">5</button>\n            <button onClick={props.handleNum1Props} value=\"6\" className=\"btn btn-success m-1 btn-lg\">6</button>\n            <br />\n            <button onClick={props.handleNum1Props} value=\"7\" className=\"btn btn-success m-1 btn-lg\">7</button>\n            <button onClick={props.handleNum1Props} value=\"8\" className=\"btn btn-success m-1 btn-lg\">8</button>\n            <button onClick={props.handleNum1Props} value=\"9\" className=\"btn btn-success m-1 btn-lg\">9</button>\n            <br />\n            <button onClick={props.handleNum1Props} value=\"0\" className=\"btn btn-success m-1 btn-lg\">0</button>\n            <button onClick={props.handleNum1Props} value=\".\" className=\"btn btn-success m-1 btn-lg\">.</button>\n        </div>\n    )\n}\n\nexport default FirstInput","import React from 'react';\n\nconst SecondInput = (props) => {\n    return (\n        <div>\n            <button onClick={props.handleNum2Props} value=\"1\" className=\"btn btn-outline-success m-1 btn-lg\">1</button>\n            <button onClick={props.handleNum2Props} value=\"2\" className=\"btn btn-outline-success m-1 btn-lg\">2</button>\n            <button onClick={props.handleNum2Props} value=\"3\" className=\"btn btn-outline-success m-1 btn-lg\">3</button>\n            <br />\n            <button onClick={props.handleNum2Props} value=\"4\" className=\"btn btn-outline-success m-1 btn-lg\">4</button>\n            <button onClick={props.handleNum2Props} value=\"5\" className=\"btn btn-outline-success m-1 btn-lg\">5</button>\n            <button onClick={props.handleNum2Props} value=\"6\" className=\"btn btn-outline-success m-1 btn-lg\">6</button>\n            <br />\n            <button onClick={props.handleNum2Props} value=\"7\" className=\"btn btn-outline-success m-1 btn-lg\">7</button>\n            <button onClick={props.handleNum2Props} value=\"8\" className=\"btn btn-outline-success m-1 btn-lg\">8</button>\n            <button onClick={props.handleNum2Props} value=\"9\" className=\"btn btn-outline-success m-1 btn-lg\">9</button>\n            <br />\n            <button onClick={props.handleNum2Props} value=\"0\" className=\"btn btn-outline-success m-1 btn-lg\">0</button>\n            <button onClick={props.handleNum2Props} value=\".\" className=\"btn btn-outline-success m-1 btn-lg\">.</button>\n        </div>\n    )\n}\n\nexport default SecondInput","import React from 'react';\nimport { Link, Route } from 'react-router-dom'\nimport FirstInput from '../FirstInput'\nimport SecondInput from '../SecondInput'\n\nclass Calculator extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            num1: \"\",\n            num2: \"\",\n            result: \"\",\n            operation: \"\"\n        }\n        this.clear = this.clear.bind(this) \n        this.handleNum1Change = this.handleNum1Change.bind(this)\n        this.handleNum2Change = this.handleNum2Change.bind(this)\n    }\n    clear() {\n        this.reset()\n    }\n    handleNum1Change(event) {\n        this.setState({\n            num1: [...this.state.num1, event.target.value].join('')\n        })\n    }     \n    handleNum2Change(event) {\n        this.setState({\n            num2: [...this.state.num2, event.target.value].join('')\n        })\n    }\n    getAddResult = (event) => {\n        const{num1, num2} = this.state\n        this.setState({ \n            result: (parseFloat(num1) + parseFloat(num2))\n        })\n        this.setState({ \n            operation: event.target.value\n        })\n    }\n    getNegResult = (event) => {\n        const{num1, num2} = this.state\n        this.setState({ \n            result: (parseFloat(num1) - parseFloat(num2))\n        })\n        this.setState({ \n            operation: event.target.value\n        })\n    }\n    getMultiResult = (event) => {\n        const{num1, num2} = this.state\n        this.setState({ \n            result: (parseFloat(num1) * parseFloat(num2))\n        })\n        this.setState({ \n            operation: event.target.value\n        })\n    }\n    getDivideResult = (event) => {\n        const{num1, num2} = this.state\n        this.setState({ \n            result: (parseFloat(num1) / parseFloat(num2)).toFixed(2)\n        })\n        this.setState({ \n            operation: event.target.value\n        })\n    }\n   \n    render() {\n        return (\n            <div className=\"row m-3\">\n                <div className=\"navbar-toggler font-weight-bold\">\n                    First Input\n                    <h1 className=\"border border-info\" onChange={this.handleNum1Change}>{this.state.num1}</h1>\n                    <h2 onChange={this.getAddResult} onChange={this.getNegResult} onChange={this.getMultiResult} onChange={this.getDivideResult}>{this.state.operation}</h2>\n                    <br />\n                    Second Input\n                    <h1  className=\"border border-info\" onChange={this.handleNum2Change}>{this.state.num2}</h1>\n                    <br />\n                    Result\n                    <h1  className=\"border border-info\" onChange={this.getAddResult} onChange={this.getNegResult} onChange={this.getMultiResult} onChange={this.getDivideResult}>{this.state.result}</h1>\n                    <br />\n                    <form>\n                        <button className=\"btn btn-danger\" onClick={this.clear}>Clear</button>\n                    </form>\n                </div>\n                <div className=\"col-sm\">\n                    <Link to=\"/firstinput\" className=\"btn btn-secondary active m-2\">First Input</Link>\n                    <Link to=\"/secondinput\" className=\"btn btn-secondary active m-2\">Second Input</Link>\n                    <Route path=\"/firstinput\" component={() => <FirstInput handleNum1Props={this.handleNum1Change} />} />\n                    <Route path=\"/secondinput\" component={() => <SecondInput handleNum2Props={this.handleNum2Change} />} />\n                    <br />\n                    <input type=\"button\" className=\"btn btn-secondary active m-1 btn-lg\" onClick={this.getAddResult} value=\"+\" />\n                    <input type=\"button\" className=\"btn btn-secondary active m-1 btn-lg\" onClick={this.getNegResult} value=\"-\" />\n                    <input type=\"button\" className=\"btn btn-secondary active m-1 btn-lg\" onClick={this.getMultiResult} value=\"x\" />\n                    <input type=\"button\" className=\"btn btn-secondary active m-1 btn-lg\" onClick={this.getDivideResult} value=\"/\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Calculator","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <div className=\"p-1 bg-dark text-white\">\n            <p>{props.text}</p>\n        </div>\n    )\n}\nexport default Footer","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './component/Header';\nimport Calculator from './component/Calculator';\nimport Footer from './component/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"React Calculator\" />\n      <Calculator />\n      <Footer text=\"created by Michael Sabzevari\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}