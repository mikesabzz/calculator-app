{"version":3,"sources":["component/Calculator/index.js","component/FirstInput/index.js","component/Header/index.js","component/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","getResult","inputField","state","setState","eval","join","clear","bind","handleChange","window","location","reload","event","this","target","value","className","onChange","handleinputFieldProps","result","React","Component","FirstInput","props","onClick","Header","title","Footer","text","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab32f0b5.chunk.js","sourcesContent":["import React from 'react';\nimport FirstInput from '../FirstInput'\n\nclass Calculator extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            inputField: \"\"\n        }\n        this.clear = this.clear.bind(this) \n        this.handleChange = this.handleChange.bind(this)\n    }\n    clear() {\n        window.location.reload(false)\n    }\n    handleChange(event) {\n        this.setState({\n            inputField: [...this.state.inputField, event.target.value].join('')\n        })\n    }    \n    getResult = () => {\n        const{inputField} = this.state\n        this.setState({\n            inputField: [eval(inputField)].join('')\n        })\n    }\n   \n    render() {\n        return (\n            <div className=\"row m-3\">\n                <div className=\"navbar-toggler font-weight-bold\">\n                    <h1 onChange={this.handleChange}>{this.state.inputField}</h1>\n                    <br />\n                    <FirstInput\n                        clear={this.clear}\n                        handleinputFieldProps={this.handleChange}\n                        result={this.getResult}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Calculator","import React from 'react';\n\n\nconst FirstInput = (props) => {\n    return (\n        <div>\n            <button onClick={props.clear} className=\"btn btn-dark m-1 btn-lg\">AC</button>\n            <button onClick={props.handleinputFieldProps} value=\"-\" className=\"btn btn-dark m-1 btn-lg\">-</button>\n            <button onClick={props.handleinputFieldProps} value=\"%\" className=\"btn btn-dark m-1 btn-lg\">%</button>\n            <button onClick={props.handleinputFieldProps} value=\"/\" className=\"btn btn-secondary m-1 btn-lg\">/</button>\n            <br />\n            <button onClick={props.handleinputFieldProps} value=\"7\" className=\"btn btn-success m-1 btn-lg\">7</button>\n            <button onClick={props.handleinputFieldProps} value=\"8\" className=\"btn btn-success m-1 btn-lg\">8</button>\n            <button onClick={props.handleinputFieldProps} value=\"9\" className=\"btn btn-success m-1 btn-lg\">9</button>\n            <button onClick={props.handleinputFieldProps} value=\"*\" className=\"btn btn-secondary m-1 btn-lg\">x</button>\n            <br />\n            <button onClick={props.handleinputFieldProps} value=\"4\" className=\"btn btn-success m-1 btn-lg\">4</button>\n            <button onClick={props.handleinputFieldProps} value=\"5\" className=\"btn btn-success m-1 btn-lg\">5</button>\n            <button onClick={props.handleinputFieldProps} value=\"6\" className=\"btn btn-success m-1 btn-lg\">6</button>\n            <button onClick={props.handleinputFieldProps} value=\"-\" className=\"btn btn-secondary m-1 btn-lg\">-</button>\n            <br />\n            <button onClick={props.handleinputFieldProps} value=\"1\" className=\"btn btn-success m-1 btn-lg\">1</button>\n            <button onClick={props.handleinputFieldProps} value=\"2\" className=\"btn btn-success m-1 btn-lg\">2</button>\n            <button onClick={props.handleinputFieldProps} value=\"3\" className=\"btn btn-success m-1 btn-lg\">3</button>\n            <button onClick={props.handleinputFieldProps} value=\"+\" className=\"btn btn-secondary m-1 btn-lg\">+</button>\n            <br />\n            <button onClick={props.handleinputFieldProps} value=\"0\" className=\"btn btn-success w-25 m-1 btn-lg\">0</button>\n            <button onClick={props.handleinputFieldProps} value=\".\" className=\"btn btn-success m-1 btn-lg\">.</button>\n            <button onClick={props.result} value=\"=\" className=\"btn btn-secondary m-1 btn-lg\">=</button>\n        </div>\n    )\n}\n\nexport default FirstInput","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Header(props) {\n    return (\n        <div className=\"font-weight-bold p-3 bg-dark text-white\">\n            <h1>{props.title}</h1>\n        </div>\n    )\n\n}\nexport default Header","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <div className=\"p-1 bg-dark text-white\">\n            <p>{props.text}</p>\n        </div>\n    )\n}\nexport default Footer","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './component/Header';\nimport Calculator from './component/Calculator';\nimport Footer from './component/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"React Calculator\" />\n      <Calculator />\n      <Footer text=\"created by Michael Sabzevari\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}